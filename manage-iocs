#!/bin/bash

CONF=/etc/default/epics-softioc

LIBRARY=/usr/share/sysv-rc-softioc/library.sh
INITBASESCRIPT=/usr/share/sysv-rc-softioc/softioc
INITDDIR=/etc/init.d

warn () {
	echo "$1" >&2
}

die () {
	echo "$1" >&2
	exit 1
}

. "$LIBRARY"

usage() {
	printf "Usage: %s [-v] [-x] cmd\n" `basename $0`
	echo "Available commands:"
	echo "  help          - display this message"
	echo "  report [ioc]  - Show config of all/an IOC"
	echo "  status        - Check if IOCs are running"
	echo "  nextport      - Find the next unused procServ port"
	echo "  install [ioc] - Create /etc/init.d/softioc-[ioc]"
	echo "  enable [ioc]  - Register IOC to start during system boot"
	echo "  disable [ioc] - Un-register IOC"
	exit 2
}

#   Print IOC instance config
#
#  BASEDIR  IOCNAME  USER  PORT  HOSTNAME  CMD
#
# $1 - iocdir
reportone() {
	if [ -z "$HEADER" ]; then
		echo -e "BASE\t\tIOC\t\tUSER\t\tPORT\tHOST\tCMD"
		export HEADER=1
	fi
	local IOC="`basename $1`"
	local BASE="`dirname $1`"
	if [ ! -r "$1/config" ]; then
		echo "Missing config $1/config" >&2
		return 1
	fi
	unset EXEC USER HOST
	local INSTBASE="$1"
	. "$1/config"
	EXEC="${EXEC:-${INSTBASE}/st.cmd}"
	[ -z "$HOST" ] && HOST="anywhere"
	echo -e "$BASE\t$IOC\t\t$USER\t\t$PORT\t$HOST\t$EXEC"
}

installioc() {
	IOC="$1"
	BASE="`findbase "$IOC"`"
	[ $? -ne 0 ] && die "Failed to find ioc $IOC"
	echo "Installing IOC $BASE/$IOC"
	SCRIPT="$INITDDIR/softioc-$IOC"
	echo "As $SCRIPT"
	if [ -f "$SCRIPT" ] && ! grep 'AUTOMATICALLYGENERATED' "$SCRIPT" &>/dev/null
	then
		# script is a file and isn't automatically managed
		mv --backup=numbered "$SCRIPT" "$SCRIPT".old || die "failed to backup existing script"
		echo "Backing up existing script"
	elif [ -h "$SCRIPT" ]
	then
		# old-style symlink
		echo "Replacing existing symlink to `readlink "$SCRIPT"`"
		rm -f "$SCRIPT" || die "Failed to remove symlink"
	fi
	cat << EOF > "$SCRIPT"
## Notice
# This file was generated by `basename $0`
# on `date -R`
# If you edit this file then remove the following line
# to prevent automatic updates
## AUTOMATICALLYGENERATED

### BEGIN INIT INFO
# Provides:          softioc-$IOC
# Required-Start:    \$remote_fs \$local_fs \$network \$syslog \$time
# Required-Stop:     \$remote_fs \$local_fs \$network \$syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: An EPICS Soft IOC
# Description:       Control a single software IOC
### END INIT INFO

. "$INITBASESCRIPT"
EOF
	[ -f "$SCRIPT" -a -s "$SCRIPT" ] || die "Failed to create $SCRIPT"
	echo "Complete"
	echo "To add the IOC to the system boot order run:"
	echo "$0 enable $IOC"
}

VERB=

while getopts hvx arg
do
	case $arg in
	v)	VERB=1;;
	x)	set -x;;
	h)	usage;;
	esac
done
shift $(($OPTIND - 1))

iocinit

[ -n "$VERB" ] && echo "Searching in: $IOCPATH"

cmd="$1"
shift

[ -n "$VERB" ] && echo "Command: $cmd"

case "$cmd" in
report)
	visit reportone "$1"
	;;

list)
	visit echo "$1"
	;;

status)
	ls -1 /etc/init.d/softioc-* | while read ff
	do
		printf "$ff\t\t"
		IOC="`basename "$ff"`"
		if $ff status &>/dev/null
		then
			printf "Running"
		else
			printf "Stopped"
		fi
		if ! ls /etc/rc*.d/*$IOC &>/dev/null
		then
			printf ".  Not registered"
		fi
		printf "\n"
	done
	;;

nextport)
	# Find the highest port in use and add one.
	LAST="`visit reportone "$1" | tail -n '+2' | awk '{print $4}' | sort -n | tail -n1`"
	if [ -n "$LAST" ]
	then
		# print next port
		expr "$LAST" '+' 1
	else
		echo 4050
	fi
	;;

install)
	requireroot
	installioc "$1"
	;;

enable)
	[ -z "$1" ] && die "Missing argument"
	echo "Enable: softioc-$1"
	update-rc.d "softioc-$1" defaults 99
	;;

disable)
	[ -z "$1" ] && die "Missing argument"
	echo "Disable: softioc-$1"
	update-rc.d -f "softioc-$1" remove
	;;

help)
	usage
	;;
*)
	die "Unknown command $cmd"
	;;
esac
