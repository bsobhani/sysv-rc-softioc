#!/bin/bash

CONF=/etc/default/epics-softioc

warn () {
	echo "Warning: $1" >&2
}

die () {
	echo "Error: $1" >&2
	usage
}

usage() {
	printf "Usage: %s [-v] [-x] cmd\n" `basename $0`
	echo "Available commands:"
	echo "  help         - display this message"
	echo "  report [ioc] - Show config of all/an IOC"
	echo "  status       - Check if IOCs are running"
	echo "  nextport     - Find the next unused procServ port"
	exit 2
}

#   Print IOC instance config
#
#  BASEDIR  IOCNAME  USER  PORT  HOSTNAME  CMD
#
# $1 - iocdir
reportone() {
	if [ -z "$HEADER" ]; then
		echo -e "BASE\t\tIOC\t\tUSER\t\tPORT\tHOST\tCMD"
		export HEADER=1
	fi
	local IOC="`basename $1`"
	local BASE="`dirname $1`"
	if [ ! -r "$1/config" ]; then
		echo "Missing config $1/config" >&2
		return 1
	fi
	unset EXEC USER HOST
	local INSTBASE="$1"
	. "$1/config"
	EXEC="${EXEC:-${INSTBASE}/st.cmd}"
	[ -z "$HOST" ] && HOST="anywhere"
	echo -e "$BASE\t$IOC\t\t$USER\t\t$PORT\t$HOST\t$EXEC"
}

#   Run command $1 on IOC instances
# $1 - A shell command
# $2 - IOC name (empty for all IOCs)
visit() {
	[ -z "$1" ] && die "visitall: missing argument"

	save_IFS="$IFS"
	IFS=':'
	for ent in $IOCPATH
	do
		IFS="$save_IFS"
		[ -z "$ent" ] && continue

		for iocconf in "$ent"/*/config
		do
			ioc="`dirname "$iocconf"`"
			name="`basename "$ioc"`"
			[ "$name" = '*' ] && continue

			if [ -z "$2" -o "$name" = "$2" ]; then
				$1 $ioc
			fi
		done
	done
}

VERB=

while getopts hvx arg
do
	case $arg in
	v)	VERB=1;;
	x)	set -x;;
	h)	usage;;
	esac
done
shift $(($OPTIND - 1))

if [ -r "$CONF" ]
then
  . $CONF
  [ -z "$SOFTBASE" ] && warn "SOFTBASE not set in $CONF"
  [ -d "$SOFTBASE" ] || warn "SOFTBASE ($SOFTBASE) is not a directory"
elif [ -n "$VERB" ]
then
  warn "global config '$CONF' Not found"
fi

IOCPATH=/etc/iocs
if [ -n "$SOFTBASE" ]
then
  # Search in system locations first then user locations
  IOCPATH="$IOCPATH:$SOFTBASE"
fi

[ -n "$VERB" ] && echo "Searching in: $IOCPATH"

cmd="$1"
shift

[ -n "$VERB" ] && echo "Command: $cmd"

case "$cmd" in
report)
	visit reportone "$1"
	;;

list)
	visit echo "$1"
	;;

status)
	ls -1 /etc/init.d/softioc-* | while read ff
	do
		printf "$ff\t\t"
		IOC="`basename "$ff"`"
		if $ff status &>/dev/null
		then
			printf "Running"
		else
			printf "Stopped"
		fi
		if ! ls /etc/rc*.d/*$IOC &>/dev/null
		then
			printf ".  Not registered"
		fi
		printf "\n"
	done
	;;

nextport)
	# Find the highest port in use and add one.
	LAST="`visit reportone "$1" | tail -n '+2' | awk '{print $4}' | sort -n | tail -n1`"
	if [ -n "$LAST" ]
	then
		# print next port
		expr "$LAST" '+' 1
	else
		echo 4050
	fi
	;;

help)
	usage
	;;
*)
	die "Unknown command $cmd"
	;;
esac
